# Pandas-Assignment

Q1. How do you load a CSV file into a Pandas DataFrame?
sol.import pandas as pd
    df = pd.read_csv('filename.csv')
    In this example, we import the Pandas library and then use the read_csv() function to read the CSV file 'filename.csv' into a DataFrame called df. By default, the first row of the CSV file is assumed to be the header row, and the column names are automatically inferred from this row. If the CSV file does not have a header row, you can specify this using the header parameter:  
    
    
    
 
Q2. How do you check the data type of a column in a Pandas DataFrame?
You can check the data type of a column in a Pandas DataFrame using the dtypes attribute. Here's an example:
import pandas as pd

df = pd.read_csv('filename.csv')
print(df.dtypes)





Q3. How do you select rows from a Pandas DataFrame based on a condition?

To select rows from a Pandas DataFrame based on a condition, you can use boolean indexing. Boolean indexing is a technique where you create a boolean mask, which is a Series or DataFrame of True/False values that correspond to whether the rows in the original DataFrame meet a certain condition or not.
import pandas as pd

df = pd.read_csv('filename.csv')
mask = df['column_name'] > 5
result = df[mask]
print(result)



Q4. How do you rename columns in a Pandas DataFrame?
To rename columns in a Pandas DataFrame, you can use the rename() method. Here's an example:

import pandas as pd
df = pd.read_csv('filename.csv')
df = df.rename(columns={'old_column_name': 'new_column_name'})
print(df.head())




Q5. How do you drop columns in a Pandas DataFrame?
To drop columns in a Pandas DataFrame, you can use the drop() method. Here's an example:
import pandas as pd

df = pd.read_csv('filename.csv')
df = df.drop('column_name', axis=1)
print(df.head())




Q6. How do you find the unique values in a column of a Pandas DataFrame?
To find the unique values in a column of a Pandas DataFrame, you can use the unique() method. Here's an example:
import pandas as pd
df = pd.read_csv('filename.csv')
unique_values = df['column_name'].unique()
print(unique_values)



Q6. To find the unique values in a column of a Pandas DataFrame, you can use the unique() method. Here's an example:
import pandas as pd

df = pd.read_csv('filename.csv')
unique_values = df['column_name'].unique()
print(unique_values)




Q7. To find the number of missing values in each column of a Pandas DataFrame, you can use the isnull() method to create a DataFrame of True/False values indicating where missing values are, and then use the sum() method to count the number of True values in each column. Here's an example:
import pandas as pd
df = pd.read_csv('filename.csv')
missing_values = df.isnull().sum()
print(missing_values)


Q8. To fill missing values in a Pandas DataFrame with a specific value, you can use the fillna() method. Here's an example:
import pandas as pd
df = pd.read_csv('filename.csv')
df = df.fillna(0)
print(df.head())




Q10. To merge two Pandas DataFrames on a specific column, you can use the merge() method. Here's an example:import pandas as pd
df1 = pd.read_csv('filename1.csv')
df2 = pd.read_csv('filename2.csv')
merged_df = pd.merge(df1, df2, on='column_name')
print(merged_df.head())



Q11. To group data in a Pandas DataFrame by a specific column and apply an aggregation function, you can use the groupby() method. Here's an example:
import pandas as pd
df = pd.read_csv('filename.csv')
grouped_df = df.groupby('column_name').mean()
print(grouped_df.head())




Q12. To pivot a Pandas DataFrame, you can use the pivot() method. Here's an example:
import pandas as pd
df = pd.read_csv('filename.csv')
pivot_df = df.pivot(index='index_column', columns='column_to_pivot', values='value_column')
print(pivot_df.head())


Q13. To change the data type of a column in a Pandas DataFrame, you can use the astype() method. Here's an example:
df = pd.read_csv('filename.csv')
df['column_name'] = df['column_name'].astype(int)
print(df.dtypes)



Q14. To sort a Pandas DataFrame by a specific column, you can use the sort_values() method. For example, to sort a DataFrame df by a column named "column_name", you can use the following code:
df = df.sort_values(by='column_name')



Q15. To create a copy of a Pandas DataFrame, you can use the copy() method. For example, to create a copy of a DataFrame df, you can use the following code:
df_copy = df.copy()




Q16. To filter rows of a Pandas DataFrame by multiple conditions, you can use the & operator to combine multiple conditions. For example, to filter a DataFrame df by two conditions where column "column1" equals 1 and column "column2" equals 2, you can use the following code:
df_filtered = df[(df['column1'] == 1) & (df['column2'] == 2)]



Q17. To calculate the mean of a column in a Pandas DataFrame, you can use the mean() method. For example, to calculate the mean of a column "column_name" in a DataFrame df, you can use the following code:
mean_value = df['column_name'].mean()



Q18. To calculate the standard deviation of a column in a Pandas DataFrame, you can use the std() method. For example, to calculate the standard deviation of a column "column_name" in a DataFrame df, you can use the following code:
std_value = df['column_name'].std()




Q19. To calculate the correlation between two columns in a Pandas DataFrame, you can use the corr() method. For example, to calculate the correlation between columns "column1" and "column2" in a DataFrame df, you can use the following code:
correlation = df['column1'].corr(df['column2'])




Q20. To select specific columns in a DataFrame using their labels, you can use the indexing operator [] with a list of column labels. For example, to select columns "column1" and "column2" in a DataFrame df, you can use the following code:
selected_columns = df[['column1', 'column2']]




Q21. To select specific rows in a DataFrame using their indexes, you can use the loc[] method. For example, to select rows with index values 0, 1, and 2 in a DataFrame df, you can use the following code:
selected_rows = df.loc[[0, 1, 2]]



Q22. To sort a DataFrame by a specific column, you can use the sort_values() method. For example, to sort a DataFrame df by a column named "column_name" in descending order, you can use the following code:
df_sorted = df.sort_values(by='column_name', ascending=False)




Q23. To create a new column in a DataFrame based on the values of another column, you can use the indexing operator [] and assign the new column with a value calculated from the existing column. For example, to create a new column "new_column" in a DataFrame df based on the values of an existing column "column_name", you can use the following code:
df['new_column'] = df['column_name'] * 2



Q24. To remove duplicates from a Pandas DataFrame, you can use the drop_duplicates method. This method returns a new DataFrame with the duplicate rows removed. By default, the drop_duplicates method considers all columns when identifying duplicate rows, but you can also specify a subset of columns to consider by passing a list of column names to the subset parameter. Here's an example:
import pandas as pd
df = pd.DataFrame({'A': [1, 2, 3, 2], 'B': ['foo', 'bar', 'foo', 'baz']})
df = df.drop_duplicates()
print(df)




Q25. In Pandas, .loc is used to select rows and columns by label, while .iloc is used to select rows and columns by integer index. Here are some examples of how to use these methods:
import pandas as pd
df = pd.DataFrame({'A': [1, 2, 3], 'B': ['foo', 'bar', 'baz']}, index=['x', 'y', 'z'])
print(df.loc['x', 'A'])  # outputs 1
print(df.iloc[0, 0])  # outputs 1
print(df.loc['y'])  # outputs a series with values 2 and 'bar'
print(df.iloc[1])  # outputs a series with values 2 and 'bar'
print(df.loc[['x', 'z'], ['A', 'B']])  # outputs a dataframe with rows x and z and columns A and B
print(df.iloc[[0, 2], [0, 1]])  # outputs a dataframe with rows 0 and 2 and columns 0 and 1






